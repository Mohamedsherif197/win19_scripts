# Update Microsoft Edge to version 117.0.2045.36 if Microsoft Edge exists on the machine.

# Check if Microsoft Edge is installed
$edgeApp = Get-AppxPackage -Name Microsoft.MicrosoftEdge

if ($edgeApp) {
    Write-Output "Microsoft Edge is installed."
    $edgeVersion = (Get-ItemProperty 'HKCU:\SOFTWARE\Microsoft\Edge\BLBeacon' -Name 'version').version
    $edgeVersion    
    $targetVersion = [Version]"118.0.2088.78"
    $currentVersion = [Version]"$edgeVersion"

    if ($currentVersion.Major -lt $targetVersion.Major) {
        # The current version's major component is less than the target version's major component
        $result = $true
    }
    elseif ($currentVersion.Major -eq $targetVersion.Major -and $currentVersion.Minor -lt $targetVersion.Minor) {
        # The current version's major component is equal to the target version's major component,
        # but the current version's minor component is less than the target version's minor component
        $result = $true
    }
    elseif ($currentVersion.Major -eq $targetVersion.Major -and $currentVersion.Minor -eq $targetVersion.Minor -and $currentVersion.Build -lt $targetVersion.Build) {
        # The current version's major and minor components are equal to the target version's major and minor components,
        # but the current version's build component is less than the target version's build component
        $result = $true
    }
    elseif ($currentVersion.Major -eq $targetVersion.Major -and $currentVersion.Minor -eq $targetVersion.Minor -and $currentVersion.Build -eq $targetVersion.Build -and $currentVersion.Revision -lt $targetVersion.Revision) {
        # The current version's major, minor, and build components are equal to the target version's major, minor, and build components,
        # but the current version's revision component is less than the target version's revision component
        $result = $true
    }
    else {
        # The current version is equal to or greater than the target version
        $result = $false
    }

    if ($result -eq $true) {
        Write-Output "Good morning"
        Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2109047&Channel=Stable&language=en&brand=M100" -OutFile "$env:USERPROFILE\Downloads\MicrosoftEdgeSetup.exe"

        # Start-Process -FilePath "$env:USERPROFILE\Downloads\MicrosoftEdgeSetup.exe" -ArgumentList "/S" -Wait

        $installerPath = "$env:USERPROFILE\Downloads\MicrosoftEdgeSetup.exe"

        # Create a process start info object
        $psi = New-Object System.Diagnostics.ProcessStartInfo
        $psi.FileName = $installerPath

        # Set the process start info properties to run the installation silently without prompts
        $psi.UseShellExecute = $false
        $psi.RedirectStandardOutput = $true
        $psi.RedirectStandardError = $true
        $psi.WindowStyle = 'Hidden'

        # Start the installation process
        $process = [System.Diagnostics.Process]::Start($psi)

        # Wait for the process to complete
        $process.WaitForExit()

        # Check the exit code to determine if the installation was successful
        if ($process.ExitCode -eq 0) {
            Write-Output "Installation completed successfully."
        } else {
            Write-Output "Installation failed with exit code $($process.ExitCode)."
        }
    }
    else {
        Write-Output "Up to date"
    }
}
else {
    Write-Output "Microsoft Edge is not installed."
}

=============================================================================================================================================================================================================


# Update Microsoft Edge to version 117.0.2045.36 if Microsoft Edge exists on the machine.

# Check if Microsoft Edge is installed
$edgeApp = Get-AppxPackage -Name Microsoft.MicrosoftEdge

if ($edgeApp) {
    Write-Output "Microsoft Edge is installed."
    $edgeVersion = (Get-ItemProperty 'HKCU:\SOFTWARE\Microsoft\Edge\BLBeacon' -Name 'version').version
    $edgeVersion    
    $targetVersion = [Version]"118.0.2088.78"
    $currentVersion = [Version]"$edgeVersion"

    if ($currentVersion.Major -lt $targetVersion.Major) {
        # The current version's major component is less than the target version's major component
        $result = $true
    }
    elseif ($currentVersion.Major -eq $targetVersion.Major -and $currentVersion.Minor -lt $targetVersion.Minor) {
        # The current version's major component is equal to the target version's major component,
        # but the current version's minor component is less than the target version's minor component
        $result = $true
    }
    elseif ($currentVersion.Major -eq $targetVersion.Major -and $currentVersion.Minor -eq $targetVersion.Minor -and $currentVersion.Build -lt $targetVersion.Build) {
        # The current version's major and minor components are equal to the target version's major and minor components,
        # but the current version's build component is less than the target version's build component
        $result = $true
    }
    elseif ($currentVersion.Major -eq $targetVersion.Major -and $currentVersion.Minor -eq $targetVersion.Minor -and $currentVersion.Build -eq $targetVersion.Build -and $currentVersion.Revision -lt $targetVersion.Revision) {
        # The current version's major, minor, and build components are equal to the target version's major, minor, and build components,
        # but the current version's revision component is less than the target version's revision component
        $result = $true
    }
    else {
        # The current version is equal to or greater than the target version
        $result = $false
    }

    if ($result -eq $true) {
        Write-Output "Good morning"
        # Specify the URL to download the latest version of Microsoft Edge
        $downloadUrl = "https://go.microsoft.com/fwlink/?linkid=2109047&Channel=Stable&language=en&brand=M100"
    
        # Specify the path where the installer will be downloaded
        $installerPath = "$env:USERPROFILE\Downloads\MicrosoftEdgeSetup.exe"

        # Download the latest version of Microsoft Edge installer
        Invoke-WebRequest -Uri $downloadUrl -OutFile $installerPath
    
        # Create a process start info object
        $psi = New-Object System.Diagnostics.ProcessStartInfo
        $psi.FileName = $installerPath

        # Set the process start info properties to run the installation silently without prompts
        $psi.UseShellExecute = $false
        $psi.RedirectStandardOutput = $true
        $psi.RedirectStandardError = $true
        $psi.WindowStyle = 'Hidden'

        # Start the installation process
        $process = [System.Diagnostics.Process]::Start($psi)

        # Wait for the process to complete
        $process.WaitForExit()

        # Check the exit code to determine if the installation was successful
        if ($process.ExitCode -eq 0) {
            Write-Output "Microsoft Edge installation completed successfully."
        } else {
            Write-Output "Microsoft Edge installation failed with exit code $($process.ExitCode)."
        }
    }
    else {
        Write-Output "Up to date"
    }
}
else {
    Write-Output "Microsoft Edge is not installed."
}



===============================================================================================================================================================================================
$edgeVersion = (Get-ItemProperty 'HKCU:\SOFTWARE\Microsoft\Edge\BLBeacon' -Name 'version').version
$edgeVersion  
$targetVersion = [Version]"118.0.2088.78"
$currentVersion = [Version]"$edgeversion"

if ($currentVersion -eq $targetVersion) {
    Write-Output "Up to date"
}
else {
    if ($currentVersion.Major -lt $targetVersion.Major) {
        # The current version's major component is less than the target version's major component
        $result = $true
    }
    elseif ($currentVersion.Major -eq $targetVersion.Major -and $currentVersion.Minor -lt $targetVersion.Minor) {
        # The current version's major component is equal to the target version's major component,
        # but the current version's minor component is less than the target version's minor component
        $result = $true
    }
    elseif ($currentVersion.Major -eq $targetVersion.Major -and $currentVersion.Minor -eq $targetVersion.Minor -and $currentVersion.Build -lt $targetVersion.Build) {
        # The current version's major and minor components are equal to the target version's major and minor components,
        # but the current version's build component is less than the target version's build component
        $result = $true
    }
    elseif ($currentVersion.Major -eq $targetVersion.Major -and $currentVersion.Minor -eq $targetVersion.Minor -and $currentVersion.Build -eq $targetVersion.Build -and $currentVersion.Revision -lt $targetVersion.Revision) {
        # The current version's major, minor, and build components are equal to the target version's major, minor, and build components,
        # but the current version's revision component is less than the target version's revision component
        $result = $true
    }
    else {
        # The current version is greater than the target version
        $result = $false
    }

    if ($result) {
        Write-Output "Good morning"
    }
    else {
        Write-Output "Bad night"
    }
}
